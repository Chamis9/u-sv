import { useState, useContext, createContext, ReactNode } from "react";
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";

type Language = {
  code: string;
  name: string;
  flag: string;
};

const languages: Language[] = [
  { code: "lv", name: "Latvie≈°u", flag: "üá±üáª" },
  { code: "en", name: "English", flag: "üá¨üáß" },
  { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
];

// Create translations for all content
export type Translations = {
  hero: {
    title: string;
    titleHighlight: string;
    subtitle: string;
    comingSoon: string;
    subscribeText: string;
    learnMoreBtn: string;
    c2cExplanation: string;
  };
  howItWorks: {
    title: string;
    subtitle: string;
    steps: {
      title: string;
      description: string;
    }[];
  };
  footer: {
    allRightsReserved: string;
    madeWith: string;
    c2cExplanation: string;
  };
};

// Define all translations
const translationsData: Record<string, Translations> = {
  lv: {
    hero: {
      title: "PƒÅrdodiet un pƒìrciet biƒºetes",
      titleHighlight: "vienkƒÅr≈°i un dro≈°i",
      subtitle: "PirmƒÅ C2C* platforma biƒºe≈°u apmai≈Üai LatvijƒÅ",
      comingSoon: "Drƒ´zumƒÅ",
      subscribeText: "Piesakieties, lai uzzinƒÅtu par platformas palai≈°anu",
      learnMoreBtn: "UzzinƒÅt vairƒÅk",
      c2cExplanation: "* C2C (Consumer-to-Consumer) ir tirdzniecƒ´bas modelis, kur privƒÅtpersonas pƒÅrdod preces vai pakalpojumus citƒÅm privƒÅtpersonƒÅm."
    },
    howItWorks: {
      title: "KƒÅ tas strƒÅdƒÅ",
      subtitle: "VienkƒÅr≈°s un dro≈°s veids, kƒÅ pƒÅrdot vai iegƒÅdƒÅties biƒºetes uz pasƒÅkumiem",
      steps: [
        {
          title: "Ievieto biƒºeti",
          description: "Ievietojiet pasƒÅkuma biƒºeti platformƒÅ ƒÅtri un vienkƒÅr≈°i"
        },
        {
          title: "Sazinies ar pircƒìju",
          description: "Izmantojiet platformas dro≈°ƒÅs sazi≈Üas iespƒìjas"
        },
        {
          title: "Dro≈°a apmai≈Üa",
          description: "VienkƒÅr≈°s un dro≈°s apmai≈Üas process"
        },
        {
          title: "Apmeklƒì pasƒÅkumu",
          description: "PasƒÅkuma apmeklƒìjums un emocijas ir garantƒìtas"
        }
      ]
    },
    footer: {
      allRightsReserved: "Visas tiesƒ´bas aizsargƒÅtas.",
      madeWith: "Veidots ar",
      c2cExplanation: "",
    }
  },
  en: {
    hero: {
      title: "Buy and sell tickets",
      titleHighlight: "simply and securely",
      subtitle: "The first C2C* platform for ticket exchange in Latvia",
      comingSoon: "Coming soon",
      subscribeText: "Subscribe to learn about platform launch",
      learnMoreBtn: "Learn more",
      c2cExplanation: "* C2C (Consumer-to-Consumer) is a trading model where individuals sell products or services to other individuals."
    },
    howItWorks: {
      title: "How it works",
      subtitle: "A simple and secure way to sell or purchase event tickets",
      steps: [
        {
          title: "List your ticket",
          description: "List your event ticket on the platform quickly and easily"
        },
        {
          title: "Connect with buyers",
          description: "Use the platform's secure communication features"
        },
        {
          title: "Secure exchange",
          description: "Simple and secure exchange process"
        },
        {
          title: "Attend the event",
          description: "Event attendance and emotions are guaranteed"
        }
      ]
    },
    footer: {
      allRightsReserved: "All rights reserved.",
      madeWith: "Made with",
      c2cExplanation: "",
    }
  },
  ru: {
    hero: {
      title: "–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∏ –ø–æ–∫—É–ø–∞–π—Ç–µ –±–∏–ª–µ—Ç—ã",
      titleHighlight: "–ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ",
      subtitle: "–ü–µ—Ä–≤–∞—è C2C* –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–∏–ª–µ—Ç–∞–º–∏ –≤ –õ–∞—Ç–≤–∏–∏",
      comingSoon: "–°–∫–æ—Ä–æ",
      subscribeText: "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      learnMoreBtn: "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
      c2cExplanation: "* C2C (Consumer-to-Consumer) ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —á–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞ –ø—Ä–æ–¥–∞—é—Ç —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏–º —á–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–∞–º."
    },
    howItWorks: {
      title: "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
      subtitle: "–ü—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
      steps: [
        {
          title: "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –±–∏–ª–µ—Ç",
          description: "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ"
        },
        {
          title: "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º",
          description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        },
        {
          title: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω",
          description: "–ü—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞"
        },
        {
          title: "–ü–æ—Å–µ—Ç–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
          description: "–ü–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —ç–º–æ—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        }
      ]
    },
    footer: {
      allRightsReserved: "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.",
      madeWith: "–°–¥–µ–ª–∞–Ω–æ —Å",
      c2cExplanation: "",
    }
  }
};

// Create the language context
interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  translations: Translations;
}

const LanguageContext = createContext<LanguageContextType>({
  currentLanguage: languages[0],
  setLanguage: () => {},
  translations: translationsData.lv,
});

// Create the provider component
export function LanguageProvider({ children }: { children: ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState(languages[0]);

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
  };

  return (
    <LanguageContext.Provider 
      value={{ 
        currentLanguage, 
        setLanguage, 
        translations: translationsData[currentLanguage.code] 
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
}

// Hook to use the language context
export function useLanguage() {
  return useContext(LanguageContext);
}

export function LanguageSelector() {
  const { currentLanguage, setLanguage } = useLanguage();

  return (
    <div className="language-selector">
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button 
            variant="outline" 
            className="rounded-full bg-white/10 backdrop-blur-sm text-white border-white/20 hover:bg-white/20"
          >
            {currentLanguage.flag} <span className="ml-1">{currentLanguage.name}</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="bg-white/90 backdrop-blur-sm border-white/20">
          {languages.map((language) => (
            <DropdownMenuItem
              key={language.code}
              onClick={() => setLanguage(language)}
              className="cursor-pointer hover:bg-orange-100"
            >
              <span className="mr-2">{language.flag}</span>
              {language.name}
            </DropdownMenuItem>
          ))}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}
